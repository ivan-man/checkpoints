// <auto-generated />
using System;
using Hid.Checkpoint.DataAccess.Ef;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hid.Checkpoint.DataAccess.Ef.Migrations
{
    [DbContext(typeof(CheckPointsContext))]
    [Migration("20230430194527_models_edited")]
    partial class models_edited
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccessLevelAccessPoint", b =>
                {
                    b.Property<int>("AccessLevelsId")
                        .HasColumnType("integer")
                        .HasColumnName("access_levels_id");

                    b.Property<int>("AccessPointsId")
                        .HasColumnType("integer")
                        .HasColumnName("access_points_id");

                    b.HasKey("AccessLevelsId", "AccessPointsId")
                        .HasName("pk_access_level_access_point");

                    b.HasIndex("AccessPointsId")
                        .HasDatabaseName("ix_access_level_access_point_access_points_id");

                    b.ToTable("access_level_access_point", (string)null);
                });

            modelBuilder.Entity("ApproveStageApproveStage", b =>
                {
                    b.Property<int>("NextStagesId")
                        .HasColumnType("integer")
                        .HasColumnName("next_stages_id");

                    b.Property<int>("PrevStagesId")
                        .HasColumnType("integer")
                        .HasColumnName("prev_stages_id");

                    b.HasKey("NextStagesId", "PrevStagesId")
                        .HasName("pk_approve_stage_approve_stage");

                    b.HasIndex("PrevStagesId")
                        .HasDatabaseName("ix_approve_stage_approve_stage_prev_stages_id");

                    b.ToTable("approve_stage_approve_stage", (string)null);
                });

            modelBuilder.Entity("DevicePassRequest", b =>
                {
                    b.Property<int>("DevicesId")
                        .HasColumnType("integer")
                        .HasColumnName("devices_id");

                    b.Property<int>("PassRequestsId")
                        .HasColumnType("integer")
                        .HasColumnName("pass_requests_id");

                    b.HasKey("DevicesId", "PassRequestsId")
                        .HasName("pk_device_pass_request");

                    b.HasIndex("PassRequestsId")
                        .HasDatabaseName("ix_device_pass_request_pass_requests_id");

                    b.ToTable("device_pass_request", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.AccessLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("AccessTimeFrom")
                        .HasColumnType("time without time zone")
                        .HasColumnName("access_time_from");

                    b.Property<TimeOnly>("AccessTimeTo")
                        .HasColumnType("time without time zone")
                        .HasColumnName("access_time_to");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<int>("DaysOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("days_of_week");

                    b.Property<int>("GlobalId")
                        .HasColumnType("integer")
                        .HasColumnName("global_id");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.Property<bool>("WeekendAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("weekend_access");

                    b.HasKey("Id")
                        .HasName("pk_access_levels");

                    b.ToTable("access_levels", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.AccessPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<int>("GlobalId")
                        .HasColumnType("integer")
                        .HasColumnName("global_id");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_access_points");

                    b.ToTable("access_points", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.ApproveChain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApproveState")
                        .HasColumnType("integer")
                        .HasColumnName("approve_state");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<int>("CurrentStageId")
                        .HasColumnType("integer")
                        .HasColumnName("current_stage_id");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<int>("PassRequestId")
                        .HasColumnType("integer")
                        .HasColumnName("pass_request_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_approve_chain");

                    b.HasIndex("CurrentStageId")
                        .HasDatabaseName("ix_approve_chain_current_stage_id");

                    b.HasIndex("PassRequestId")
                        .HasDatabaseName("ix_approve_chain_pass_request_id");

                    b.ToTable("approve_chain", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.ApproveStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApproverId")
                        .HasColumnType("integer")
                        .HasColumnName("approver_id");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer")
                        .HasColumnName("chain_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("PassRequestId")
                        .HasColumnType("integer")
                        .HasColumnName("pass_request_id");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_approve_stage");

                    b.HasIndex("ApproverId")
                        .HasDatabaseName("ix_approve_stage_approver_id");

                    b.HasIndex("ChainId")
                        .HasDatabaseName("ix_approve_stage_chain_id");

                    b.HasIndex("PassRequestId")
                        .HasDatabaseName("ix_approve_stage_pass_request_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_approve_stage_type_id");

                    b.ToTable("approve_stage", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.Approver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApproveStageTemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("approve_stage_template_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_approvers");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_approvers_person_id");

                    b.ToTable("approvers", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.ChainTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_chain_template");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_chain_template_type_id");

                    b.ToTable("chain_template", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<string>("Iso2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iso2");

                    b.Property<string>("Iso3")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iso3");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_ru");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("normalized_name");

                    b.Property<string>("NormalizedNameRu")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("normalized_name_ru");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.CustomizableProperty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("InterfaceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("interface_id");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hidden");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("TypeFullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_full_name");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_customizable_property");

                    b.ToTable("customizable_property", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("CustomizableProperty");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cause")
                        .HasColumnType("text")
                        .HasColumnName("cause");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<int>("PassType")
                        .HasColumnType("integer")
                        .HasColumnName("pass_type");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("SN")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sn");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_devices");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_devices_person_id");

                    b.ToTable("devices", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("DisbandDate")
                        .HasColumnType("date")
                        .HasColumnName("disband_date");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<string>("Imns")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("imns");

                    b.Property<string>("ImnsName")
                        .HasColumnType("text")
                        .HasColumnName("imns_name");

                    b.Property<string>("Inn")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("inn");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<string>("Kpp")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("kpp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Okato")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("okato");

                    b.Property<string>("Okopf")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("okopf");

                    b.Property<string>("Okpo")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("okpo");

                    b.Property<string>("Oktmo")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("oktmo");

                    b.Property<string>("Okved")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("okved");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_organizations");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_organizations_name")
                        .HasFilter("removed is not true");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.OrganizationContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer")
                        .HasColumnName("organization_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.Property<DateOnly?>("ValidFrom")
                        .HasColumnType("date")
                        .HasColumnName("valid_from");

                    b.Property<DateOnly?>("ValidTo")
                        .HasColumnType("date")
                        .HasColumnName("valid_to");

                    b.HasKey("Id")
                        .HasName("pk_organization_contracts");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_organization_contracts_organization_id");

                    b.ToTable("organization_contracts", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.PassRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Additional")
                        .HasColumnType("text")
                        .HasColumnName("additional");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expired_date");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("request_type_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.Property<string>("VisitPurpose")
                        .HasColumnType("text")
                        .HasColumnName("visit_purpose");

                    b.HasKey("Id")
                        .HasName("pk_pass_requests");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_pass_requests_author_id");

                    b.HasIndex("RequestTypeId")
                        .HasDatabaseName("ix_pass_requests_request_type_id");

                    b.ToTable("pass_requests", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.PassRequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<TimeSpan?>("MaxPeriod")
                        .HasColumnType("interval")
                        .HasColumnName("max_period");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_pass_request_type");

                    b.ToTable("pass_request_type", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccessLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("access_level_id");

                    b.Property<int?>("ApproveStageId")
                        .HasColumnType("integer")
                        .HasColumnName("approve_stage_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<int?>("PassRequestId")
                        .HasColumnType("integer")
                        .HasColumnName("pass_request_id");

                    b.Property<int?>("SubdivisionId")
                        .HasColumnType("integer")
                        .HasColumnName("subdivision_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_persons");

                    b.HasIndex("AccessLevelId")
                        .HasDatabaseName("ix_persons_access_level_id");

                    b.HasIndex("ApproveStageId")
                        .HasDatabaseName("ix_persons_approve_stage_id");

                    b.HasIndex("PassRequestId")
                        .HasDatabaseName("ix_persons_pass_request_id");

                    b.HasIndex("SubdivisionId")
                        .HasDatabaseName("ix_persons_subdivision_id");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<string>("PositionTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("position_title");

                    b.Property<int?>("SubdivisionId")
                        .HasColumnType("integer")
                        .HasColumnName("subdivision_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_position");

                    b.HasIndex("SubdivisionId")
                        .HasDatabaseName("ix_position_subdivision_id");

                    b.ToTable("position", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.PropertyMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("ColumnDefaultVisibility")
                        .HasColumnType("boolean")
                        .HasColumnName("column_default_visibility");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<int>("PropertyId")
                        .HasColumnType("integer")
                        .HasColumnName("property_id");

                    b.Property<string>("PropertyId1")
                        .HasColumnType("text")
                        .HasColumnName("property_id1");

                    b.Property<int?>("RequestTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("request_type_id");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<decimal?>("Role")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean")
                        .HasColumnName("visible");

                    b.Property<string>("discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.HasKey("Id")
                        .HasName("pk_property_metadata");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_property_metadata_employee_id");

                    b.HasIndex("PropertyId1")
                        .HasDatabaseName("ix_property_metadata_property_id1");

                    b.HasIndex("RequestTypeId", "Role", "EmployeeId", "PropertyId")
                        .IsUnique()
                        .HasDatabaseName("ix_property_metadata_request_type_id_role_employee_id_property")
                        .HasFilter("removed is not true");

                    b.ToTable("property_metadata", (string)null);

                    b.HasDiscriminator<string>("discriminator").HasValue("PropertyMetadata");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.StageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("ApproversListOpened")
                        .HasColumnType("boolean")
                        .HasColumnName("approvers_list_opened");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<bool>("MultipleStage")
                        .HasColumnType("boolean")
                        .HasColumnName("multiple_stage");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.Property<bool>("WeekEndAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("week_end_access");

                    b.HasKey("Id")
                        .HasName("pk_stage_type");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_stage_type_author_id");

                    b.ToTable("stage_type", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.Subdivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<DateOnly?>("DisbandDate")
                        .HasColumnType("date")
                        .HasColumnName("disband_date");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<string>("Kpp")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("kpp");

                    b.Property<int>("ManagerId")
                        .HasColumnType("integer")
                        .HasColumnName("manager_id");

                    b.Property<string>("Okato")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("okato");

                    b.Property<string>("Okpo")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("okpo");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer")
                        .HasColumnName("organization_id");

                    b.Property<int?>("ParentSubdivisionId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_subdivision_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_subdivision");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("ix_subdivision_manager_id");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_subdivision_organization_id");

                    b.HasIndex("ParentSubdivisionId")
                        .HasDatabaseName("ix_subdivision_parent_subdivision_id");

                    b.ToTable("subdivision", (string)null);
                });

            modelBuilder.Entity("OrganizationContractPassRequest", b =>
                {
                    b.Property<int>("ContractsId")
                        .HasColumnType("integer")
                        .HasColumnName("contracts_id");

                    b.Property<int>("PassRequestsId")
                        .HasColumnType("integer")
                        .HasColumnName("pass_requests_id");

                    b.HasKey("ContractsId", "PassRequestsId")
                        .HasName("pk_organization_contract_pass_request");

                    b.HasIndex("PassRequestsId")
                        .HasDatabaseName("ix_organization_contract_pass_request_pass_requests_id");

                    b.ToTable("organization_contract_pass_request", (string)null);
                });

            modelBuilder.Entity("OrganizationContractPerson", b =>
                {
                    b.Property<int>("ContractsId")
                        .HasColumnType("integer")
                        .HasColumnName("contracts_id");

                    b.Property<int>("PersonsId")
                        .HasColumnType("integer")
                        .HasColumnName("persons_id");

                    b.HasKey("ContractsId", "PersonsId")
                        .HasName("pk_organization_contract_person");

                    b.HasIndex("PersonsId")
                        .HasDatabaseName("ix_organization_contract_person_persons_id");

                    b.ToTable("organization_contract_person", (string)null);
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.OrganizationProperty", b =>
                {
                    b.HasBaseType("Hid.Checkpoint.Domain.Models.CustomizableProperty");

                    b.HasDiscriminator().HasValue("OrganizationProperty");

                    b.HasData(
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Address",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Адрес",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Address",
                            IsHidden = false,
                            Removed = false,
                            Name = "Address",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Code",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Код организации",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Code",
                            IsHidden = false,
                            Removed = false,
                            Name = "Code",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Contracts",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Договоры",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Contracts",
                            IsHidden = false,
                            Removed = false,
                            Name = "Contracts",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.ContractsActual",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.ContractsActual",
                            IsHidden = false,
                            Removed = false,
                            Name = "ContractsActual",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Created",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Создано",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Created",
                            IsHidden = false,
                            Removed = false,
                            Name = "Created",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Description",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Описание",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Description",
                            IsHidden = false,
                            Removed = false,
                            Name = "Description",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.DisbandDate",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Дата расформирования",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.DisbandDate",
                            IsHidden = false,
                            Removed = false,
                            Name = "DisbandDate",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.ExternalId",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Внешний идентификатор",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.ExternalId",
                            IsHidden = false,
                            Removed = false,
                            Name = "ExternalId",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Id",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Id",
                            IsHidden = false,
                            Removed = false,
                            Name = "Id",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Imns",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Код ИМНС",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Imns",
                            IsHidden = false,
                            Removed = false,
                            Name = "Imns",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.ImnsName",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Орган ИМНС",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.ImnsName",
                            IsHidden = false,
                            Removed = false,
                            Name = "ImnsName",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Inn",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "ИНН",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Inn",
                            IsHidden = false,
                            Removed = false,
                            Name = "Inn",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Removed",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Удалено",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Removed",
                            IsHidden = false,
                            Removed = false,
                            Name = "Removed",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Kpp",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "КПП",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Kpp",
                            IsHidden = false,
                            Removed = false,
                            Name = "Kpp",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Name",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Название",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Name",
                            IsHidden = false,
                            Removed = false,
                            Name = "Name",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Okato",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "ОКАТО",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Okato",
                            IsHidden = false,
                            Removed = false,
                            Name = "Okato",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Okopf",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "ОКОПФ",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Okopf",
                            IsHidden = false,
                            Removed = false,
                            Name = "Okopf",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Okpo",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "ОКПО",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Okpo",
                            IsHidden = false,
                            Removed = false,
                            Name = "Okpo",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Oktmo",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "ОКМО",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Oktmo",
                            IsHidden = false,
                            Removed = false,
                            Name = "Oktmo",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Okved",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "ОКВЕД",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Okved",
                            IsHidden = false,
                            Removed = false,
                            Name = "Okved",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Subdivisions",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Подразделения",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Subdivisions",
                            IsHidden = false,
                            Removed = false,
                            Name = "Subdivisions",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Type",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Type",
                            IsHidden = false,
                            Removed = false,
                            Name = "Type",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Organization.Updated",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Обновлено",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Organization.Updated",
                            IsHidden = false,
                            Removed = false,
                            Name = "Updated",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Organization",
                            TypeName = "Organization",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.PersonProperty", b =>
                {
                    b.HasBaseType("Hid.Checkpoint.Domain.Models.CustomizableProperty");

                    b.HasDiscriminator().HasValue("PersonProperty");

                    b.HasData(
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Person.Contracts",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Договоры",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Person.Contracts",
                            IsHidden = false,
                            Removed = false,
                            Name = "Contracts",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Person",
                            TypeName = "Person",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Person.Created",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Создано",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Person.Created",
                            IsHidden = false,
                            Removed = false,
                            Name = "Created",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Person",
                            TypeName = "Person",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Person.Id",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Person.Id",
                            IsHidden = false,
                            Removed = false,
                            Name = "Id",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Person",
                            TypeName = "Person",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Person.Removed",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Удалено",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Person.Removed",
                            IsHidden = false,
                            Removed = false,
                            Name = "Removed",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Person",
                            TypeName = "Person",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Person.Profile",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Person.Profile",
                            IsHidden = false,
                            Removed = false,
                            Name = "Profile",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Person",
                            TypeName = "Person",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Person.Profiles",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Person.Profiles",
                            IsHidden = false,
                            Removed = false,
                            Name = "Profiles",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Person",
                            TypeName = "Person",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Person.Updated",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Обновлено",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Person.Updated",
                            IsHidden = false,
                            Removed = false,
                            Name = "Updated",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Person",
                            TypeName = "Person",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.ProfileProperty", b =>
                {
                    b.HasBaseType("Hid.Checkpoint.Domain.Models.CustomizableProperty");

                    b.HasDiscriminator().HasValue("ProfileProperty");

                    b.HasData(
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Code",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Код физлица",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Code",
                            IsHidden = false,
                            Removed = false,
                            Name = "Code",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Country",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Страна",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Country",
                            IsHidden = false,
                            Removed = false,
                            Name = "Country",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.CountryId",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Id страны",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.CountryId",
                            IsHidden = false,
                            Removed = false,
                            Name = "CountryId",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Created",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Создано",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Created",
                            IsHidden = false,
                            Removed = false,
                            Name = "Created",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.DateOfBirth",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Дата рождения",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.DateOfBirth",
                            IsHidden = false,
                            Removed = false,
                            Name = "DateOfBirth",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.DisabledDate",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Дата создания новой версии профиля",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.DisabledDate",
                            IsHidden = true,
                            Removed = false,
                            Name = "DisabledDate",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.DismissalDate",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Дата увольнения",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.DismissalDate",
                            IsHidden = false,
                            Removed = false,
                            Name = "DismissalDate",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Email",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Электронная почта",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Email",
                            IsHidden = false,
                            Removed = false,
                            Name = "Email",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.EmploymentDate",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Дата найма",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.EmploymentDate",
                            IsHidden = false,
                            Removed = false,
                            Name = "EmploymentDate",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.ExternalId",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Внешний Id",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.ExternalId",
                            IsHidden = false,
                            Removed = false,
                            Name = "ExternalId",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.ExternalIndividual",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Внешний код",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.ExternalIndividual",
                            IsHidden = false,
                            Removed = false,
                            Name = "ExternalIndividual",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Id",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Id",
                            IsHidden = false,
                            Removed = false,
                            Name = "Id",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Inn",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "ИНН",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Inn",
                            IsHidden = false,
                            Removed = false,
                            Name = "Inn",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.IsEmployee",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Признак сотрудника",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.IsEmployee",
                            IsHidden = false,
                            Removed = false,
                            Name = "IsEmployee",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Removed",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Удалено",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Removed",
                            IsHidden = false,
                            Removed = false,
                            Name = "Removed",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Name",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Имя",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Name",
                            IsHidden = false,
                            Removed = false,
                            Name = "Name",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Okpdtr",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Код должности в классифкаторе профессий и должностей",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Okpdtr",
                            IsHidden = false,
                            Removed = false,
                            Name = "Okpdtr",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.OkpdtrTitle",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Название должности из классификатора профессий и должностей",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.OkpdtrTitle",
                            IsHidden = false,
                            Removed = false,
                            Name = "OkpdtrTitle",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Organization",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Организация",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Organization",
                            IsHidden = false,
                            Removed = false,
                            Name = "Organization",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.OrganizationId",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Id организации",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.OrganizationId",
                            IsHidden = false,
                            Removed = false,
                            Name = "OrganizationId",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Patronymic",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Отчество",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Patronymic",
                            IsHidden = false,
                            Removed = false,
                            Name = "Patronymic",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Phone",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Номер телефона",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Phone",
                            IsHidden = false,
                            Removed = false,
                            Name = "Phone",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Position",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Позиция",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Position",
                            IsHidden = false,
                            Removed = false,
                            Name = "Position",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.PositionCode",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Код должности",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.PositionCode",
                            IsHidden = false,
                            Removed = false,
                            Name = "PositionCode",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.PositionId",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Id позиции",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.PositionId",
                            IsHidden = false,
                            Removed = false,
                            Name = "PositionId",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Surname",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Фамилия",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Surname",
                            IsHidden = false,
                            Removed = false,
                            Name = "Surname",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.TabN",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Табельный номер",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.TabN",
                            IsHidden = false,
                            Removed = false,
                            Name = "TabN",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.Profile.Updated",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Обновлено",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.Profile.Updated",
                            IsHidden = false,
                            Removed = false,
                            Name = "Updated",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.Profile",
                            TypeName = "Profile",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.RequestProperty", b =>
                {
                    b.HasBaseType("Hid.Checkpoint.Domain.Models.CustomizableProperty");

                    b.HasDiscriminator().HasValue("RequestProperty");

                    b.HasData(
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.Additional",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Дополнительно",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.Additional",
                            IsHidden = false,
                            Removed = false,
                            Name = "Additional",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.ApproveChains",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.ApproveChains",
                            IsHidden = false,
                            Removed = false,
                            Name = "ApproveChains",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.Author",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Автор",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.Author",
                            IsHidden = false,
                            Removed = false,
                            Name = "Author",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.Contracts",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Договоры",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.Contracts",
                            IsHidden = false,
                            Removed = false,
                            Name = "Contracts",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.Created",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Создано",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.Created",
                            IsHidden = false,
                            Removed = false,
                            Name = "Created",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.Date",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Дата запроса",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.Date",
                            IsHidden = false,
                            Removed = false,
                            Name = "Date",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.Devices",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Устройства",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.Devices",
                            IsHidden = false,
                            Removed = false,
                            Name = "Devices",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.ExpiredDate",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Действует до",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.ExpiredDate",
                            IsHidden = false,
                            Removed = false,
                            Name = "ExpiredDate",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.Guests",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Посетители",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.Guests",
                            IsHidden = false,
                            Removed = false,
                            Name = "Guests",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.Id",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.Id",
                            IsHidden = false,
                            Removed = false,
                            Name = "Id",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.Removed",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Удалено",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.Removed",
                            IsHidden = false,
                            Removed = false,
                            Name = "Removed",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.RequestType",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Тип запроса",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.RequestType",
                            IsHidden = false,
                            Removed = false,
                            Name = "RequestType",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.RequestTypeId",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Id типа запроса",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.RequestTypeId",
                            IsHidden = false,
                            Removed = false,
                            Name = "RequestTypeId",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.Updated",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Обновлено",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.Updated",
                            IsHidden = false,
                            Removed = false,
                            Name = "Updated",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "Hid.Checkpoint.Domain.Models.PassRequest.VisitPurpose",
                            Created = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Цель визита",
                            InterfaceId = "Hid.Checkpoint.Domain.Models.PassRequest.VisitPurpose",
                            IsHidden = false,
                            Removed = false,
                            Name = "VisitPurpose",
                            TypeFullName = "Hid.Checkpoint.Domain.Models.PassRequest",
                            TypeName = "PassRequest",
                            Updated = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.OrganizationMetadata", b =>
                {
                    b.HasBaseType("Hid.Checkpoint.Domain.Models.PropertyMetadata");

                    b.HasDiscriminator().HasValue("OrganizationMetadata");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.PersonMetadata", b =>
                {
                    b.HasBaseType("Hid.Checkpoint.Domain.Models.PropertyMetadata");

                    b.HasDiscriminator().HasValue("PersonMetadata");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.ProfileMetadata", b =>
                {
                    b.HasBaseType("Hid.Checkpoint.Domain.Models.PropertyMetadata");

                    b.HasDiscriminator().HasValue("ProfileMetadata");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.RequestMetadata", b =>
                {
                    b.HasBaseType("Hid.Checkpoint.Domain.Models.PropertyMetadata");

                    b.HasDiscriminator().HasValue("RequestMetadata");
                });

            modelBuilder.Entity("AccessLevelAccessPoint", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.AccessLevel", null)
                        .WithMany()
                        .HasForeignKey("AccessLevelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_access_level_access_point_access_levels_access_levels_id");

                    b.HasOne("Hid.Checkpoint.Domain.Models.AccessPoint", null)
                        .WithMany()
                        .HasForeignKey("AccessPointsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_access_level_access_point_access_points_access_points_id");
                });

            modelBuilder.Entity("ApproveStageApproveStage", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.ApproveStage", null)
                        .WithMany()
                        .HasForeignKey("NextStagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approve_stage_approve_stage_approve_stage_next_stages_id");

                    b.HasOne("Hid.Checkpoint.Domain.Models.ApproveStage", null)
                        .WithMany()
                        .HasForeignKey("PrevStagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approve_stage_approve_stage_approve_stage_prev_stages_id");
                });

            modelBuilder.Entity("DevicePassRequest", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_device_pass_request_devices_devices_id");

                    b.HasOne("Hid.Checkpoint.Domain.Models.PassRequest", null)
                        .WithMany()
                        .HasForeignKey("PassRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_device_pass_request_pass_requests_pass_requests_id");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.ApproveChain", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.ApproveStage", "CurrentStage")
                        .WithMany()
                        .HasForeignKey("CurrentStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approve_chain_approve_stage_current_stage_id");

                    b.HasOne("Hid.Checkpoint.Domain.Models.PassRequest", "PassRequest")
                        .WithMany("ApproveChains")
                        .HasForeignKey("PassRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approve_chain_pass_requests_pass_request_id");

                    b.Navigation("CurrentStage");

                    b.Navigation("PassRequest");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.ApproveStage", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.Person", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .HasConstraintName("fk_approve_stage_persons_approver_id");

                    b.HasOne("Hid.Checkpoint.Domain.Models.ApproveChain", "Chain")
                        .WithMany("Stages")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approve_stage_approve_chain_approve_chain_id");

                    b.HasOne("Hid.Checkpoint.Domain.Models.PassRequest", "PassRequest")
                        .WithMany()
                        .HasForeignKey("PassRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approve_stage_pass_requests_pass_request_id");

                    b.HasOne("Hid.Checkpoint.Domain.Models.StageType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approve_stage_stage_type_type_id");

                    b.Navigation("Approver");

                    b.Navigation("Chain");

                    b.Navigation("PassRequest");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.Approver", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approvers_persons_person_id");

                    b.OwnsOne("Hid.Checkpoint.Domain.Models.StageTemplate", "ApproveStageTemplate", b1 =>
                        {
                            b1.Property<int>("ApproverId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<int>("ChainTemplateId")
                                .HasColumnType("integer")
                                .HasColumnName("approve_stage_template_chain_template_id");

                            b1.Property<bool>("IsDisabled")
                                .HasColumnType("boolean")
                                .HasColumnName("approve_stage_template_is_disabled");

                            b1.Property<int>("Order")
                                .HasColumnType("integer")
                                .HasColumnName("approve_stage_template_order");

                            b1.Property<int>("TypeId")
                                .HasColumnType("integer")
                                .HasColumnName("approve_stage_template_type_id");

                            b1.HasKey("ApproverId");

                            b1.HasIndex("ChainTemplateId")
                                .HasDatabaseName("ix_approvers_approve_stage_template_chain_template_id");

                            b1.HasIndex("TypeId")
                                .HasDatabaseName("ix_approvers_approve_stage_template_type_id");

                            b1.ToTable("approvers");

                            b1.WithOwner()
                                .HasForeignKey("ApproverId")
                                .HasConstraintName("fk_approvers_approvers_id");

                            b1.HasOne("Hid.Checkpoint.Domain.Models.ChainTemplate", "ChainTemplate")
                                .WithMany()
                                .HasForeignKey("ChainTemplateId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_approvers_chain_template_approve_stage_template_chain_templ");

                            b1.HasOne("Hid.Checkpoint.Domain.Models.StageType", "Type")
                                .WithMany()
                                .HasForeignKey("TypeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_approvers_stage_type_approve_stage_template_type_id");

                            b1.Navigation("ChainTemplate");

                            b1.Navigation("Type");
                        });

                    b.Navigation("ApproveStageTemplate");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.ChainTemplate", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.PassRequestType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chain_template_pass_request_type_type_id");

                    b.OwnsMany("Hid.Checkpoint.Domain.Models.StageTemplate", "Stages", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ApproveChainId")
                                .HasColumnType("integer")
                                .HasColumnName("approve_chain_id");

                            b1.Property<int>("ChainTemplateId")
                                .HasColumnType("integer")
                                .HasColumnName("chain_template_id");

                            b1.Property<bool>("IsDisabled")
                                .HasColumnType("boolean")
                                .HasColumnName("is_disabled");

                            b1.Property<int>("Order")
                                .HasColumnType("integer")
                                .HasColumnName("order");

                            b1.Property<int>("TypeId")
                                .HasColumnType("integer")
                                .HasColumnName("type_id");

                            b1.HasKey("Id")
                                .HasName("pk_chain_template_stages");

                            b1.HasIndex("ApproveChainId")
                                .HasDatabaseName("ix_chain_template_stages_approve_chain_id");

                            b1.HasIndex("ChainTemplateId")
                                .HasDatabaseName("ix_chain_template_stages_chain_template_id");

                            b1.HasIndex("TypeId")
                                .HasDatabaseName("ix_chain_template_stages_type_id");

                            b1.ToTable("chain_template_stages", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ApproveChainId")
                                .HasConstraintName("fk_chain_template_stages_chain_template_chain_template_id");

                            b1.HasOne("Hid.Checkpoint.Domain.Models.ChainTemplate", "ChainTemplate")
                                .WithMany()
                                .HasForeignKey("ChainTemplateId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_chain_template_stages_chain_template_chain_template_id1");

                            b1.HasOne("Hid.Checkpoint.Domain.Models.StageType", "Type")
                                .WithMany()
                                .HasForeignKey("TypeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_chain_template_stages_stage_type_type_id");

                            b1.Navigation("ChainTemplate");

                            b1.Navigation("Type");
                        });

                    b.Navigation("Stages");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.Device", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_devices_persons_person_id");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.OrganizationContract", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.Organization", "Organization")
                        .WithMany("Contracts")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_contracts_organizations_organization_id");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.PassRequest", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.Person", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pass_requests_persons_author_id");

                    b.HasOne("Hid.Checkpoint.Domain.Models.PassRequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pass_requests_pass_request_type_request_type_id");

                    b.Navigation("Author");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.Person", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.AccessLevel", null)
                        .WithMany("Approvers")
                        .HasForeignKey("AccessLevelId")
                        .HasConstraintName("fk_persons_access_levels_access_level_id");

                    b.HasOne("Hid.Checkpoint.Domain.Models.ApproveStage", null)
                        .WithMany("Responsibles")
                        .HasForeignKey("ApproveStageId")
                        .HasConstraintName("fk_persons_approve_stage_approve_stage_id");

                    b.HasOne("Hid.Checkpoint.Domain.Models.PassRequest", null)
                        .WithMany("Guests")
                        .HasForeignKey("PassRequestId")
                        .HasConstraintName("fk_persons_pass_requests_pass_request_id");

                    b.HasOne("Hid.Checkpoint.Domain.Models.Subdivision", null)
                        .WithMany("Employees")
                        .HasForeignKey("SubdivisionId")
                        .HasConstraintName("fk_persons_subdivision_subdivision_id");

                    b.OwnsMany("Hid.Checkpoint.Domain.Models.Profile", "Profiles", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Code")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("code");

                            b1.Property<int?>("CountryId")
                                .HasColumnType("integer")
                                .HasColumnName("country_id");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("created");

                            b1.Property<DateOnly?>("DateOfBirth")
                                .HasColumnType("date")
                                .HasColumnName("date_of_birth");

                            b1.Property<DateOnly?>("DisabledDate")
                                .HasColumnType("date")
                                .HasColumnName("disabled_date");

                            b1.Property<DateOnly?>("DismissalDate")
                                .HasColumnType("date")
                                .HasColumnName("dismissal_date");

                            b1.Property<string>("Email")
                                .HasColumnType("text")
                                .HasColumnName("email");

                            b1.Property<DateOnly?>("EmploymentDate")
                                .HasColumnType("date")
                                .HasColumnName("employment_date");

                            b1.Property<Guid?>("ExternalId")
                                .HasColumnType("uuid")
                                .HasColumnName("external_id");

                            b1.Property<Guid?>("ExternalIndividual")
                                .HasColumnType("uuid")
                                .HasColumnName("external_individual");

                            b1.Property<string>("Inn")
                                .HasMaxLength(16)
                                .HasColumnType("character varying(16)")
                                .HasColumnName("inn");

                            b1.Property<bool>("IsEmployee")
                                .HasColumnType("boolean")
                                .HasColumnName("is_employee");

                            b1.Property<bool>("Removed")
                                .HasColumnType("boolean")
                                .HasColumnName("removed");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("name");

                            b1.Property<string>("Okpdtr")
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("okpdtr");

                            b1.Property<string>("OkpdtrTitle")
                                .HasColumnType("text")
                                .HasColumnName("okpdtr_title");

                            b1.Property<int>("OrganizationId")
                                .HasColumnType("integer")
                                .HasColumnName("organization_id");

                            b1.Property<string>("Patronymic")
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("patronymic");

                            b1.Property<int>("PersonId")
                                .HasColumnType("integer")
                                .HasColumnName("person_id");

                            b1.Property<string>("Phone")
                                .HasColumnType("text")
                                .HasColumnName("phone");

                            b1.Property<string>("PositionCode")
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("position_code");

                            b1.Property<int?>("PositionId")
                                .HasColumnType("integer")
                                .HasColumnName("position_id");

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("surname");

                            b1.Property<string>("TabN")
                                .HasColumnType("text")
                                .HasColumnName("tab_n");

                            b1.Property<DateTime?>("Updated")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("updated");

                            b1.HasKey("Id")
                                .HasName("pk_profile");

                            b1.HasIndex("CountryId")
                                .HasDatabaseName("ix_profile_country_id");

                            b1.HasIndex("OrganizationId")
                                .HasDatabaseName("ix_profile_organization_id");

                            b1.HasIndex("PersonId")
                                .HasDatabaseName("ix_profile_person_id");

                            b1.HasIndex("PositionId")
                                .HasDatabaseName("ix_profile_position_id");

                            b1.HasIndex("Phone", "Name", "Surname", "DateOfBirth", "OrganizationId")
                                .IsUnique()
                                .HasDatabaseName("ix_profile_phone_name_surname_date_of_birth_organization_id");

                            b1.ToTable("profile", (string)null);

                            b1.HasOne("Hid.Checkpoint.Domain.Models.Country", "Country")
                                .WithMany()
                                .HasForeignKey("CountryId")
                                .HasConstraintName("fk_profile_country_country_id");

                            b1.HasOne("Hid.Checkpoint.Domain.Models.Organization", "Organization")
                                .WithMany()
                                .HasForeignKey("OrganizationId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_profile_organizations_organization_id");

                            b1.WithOwner()
                                .HasForeignKey("PersonId")
                                .HasConstraintName("fk_profile_persons_person_id");

                            b1.HasOne("Hid.Checkpoint.Domain.Models.Position", "Position")
                                .WithMany()
                                .HasForeignKey("PositionId")
                                .HasConstraintName("fk_profile_position_position_id");

                            b1.Navigation("Country");

                            b1.Navigation("Organization");

                            b1.Navigation("Position");
                        });

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.Position", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.Subdivision", "Subdivision")
                        .WithMany()
                        .HasForeignKey("SubdivisionId")
                        .HasConstraintName("fk_position_subdivision_subdivision_id");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.PropertyMetadata", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.Person", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_property_metadata_persons_employee_id");

                    b.HasOne("Hid.Checkpoint.Domain.Models.CustomizableProperty", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId1")
                        .HasConstraintName("fk_property_metadata_customizable_property_property_id1");

                    b.HasOne("Hid.Checkpoint.Domain.Models.PassRequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .HasConstraintName("fk_property_metadata_pass_request_type_request_type_id");

                    b.Navigation("Employee");

                    b.Navigation("Property");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.StageType", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.Person", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stage_type_persons_author_id");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.Subdivision", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.Person", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subdivision_persons_manager_id");

                    b.HasOne("Hid.Checkpoint.Domain.Models.Organization", "Organization")
                        .WithMany("Subdivisions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subdivision_organizations_organization_id");

                    b.HasOne("Hid.Checkpoint.Domain.Models.Subdivision", "ParentSubdivision")
                        .WithMany()
                        .HasForeignKey("ParentSubdivisionId")
                        .HasConstraintName("fk_subdivision_subdivision_parent_subdivision_id");

                    b.Navigation("Manager");

                    b.Navigation("Organization");

                    b.Navigation("ParentSubdivision");
                });

            modelBuilder.Entity("OrganizationContractPassRequest", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.OrganizationContract", null)
                        .WithMany()
                        .HasForeignKey("ContractsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_contract_pass_request_organization_contracts_c");

                    b.HasOne("Hid.Checkpoint.Domain.Models.PassRequest", null)
                        .WithMany()
                        .HasForeignKey("PassRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_contract_pass_request_pass_requests_pass_reque");
                });

            modelBuilder.Entity("OrganizationContractPerson", b =>
                {
                    b.HasOne("Hid.Checkpoint.Domain.Models.OrganizationContract", null)
                        .WithMany()
                        .HasForeignKey("ContractsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_contract_person_organization_contracts_contrac");

                    b.HasOne("Hid.Checkpoint.Domain.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_contract_person_persons_persons_id");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.AccessLevel", b =>
                {
                    b.Navigation("Approvers");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.ApproveChain", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.ApproveStage", b =>
                {
                    b.Navigation("Responsibles");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.Organization", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Subdivisions");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.PassRequest", b =>
                {
                    b.Navigation("ApproveChains");

                    b.Navigation("Guests");
                });

            modelBuilder.Entity("Hid.Checkpoint.Domain.Models.Subdivision", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
